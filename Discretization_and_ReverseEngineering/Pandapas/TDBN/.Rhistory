par(mfrow = c(1,2))
plot(glu3, main = 'glucose, tabu, bic')
plot(glu4, main = 'glucose, tabu, aic')
installed.packages("DEAL")
installed.packages("Deal")
install.packages("Deal")
install.packages("deal")
library(deal)
help(autosearch)
data(rats)
rats
fit       <- network(rats)
fit
fit.prior <- jointprior(fit,12)
fit.prior
rm(list = ls())
library(bnlearn)
library(Rgraphviz)
# glucose
glucose_q2 <- matrix( as.factor(c(1,1,1,0,0,1,1,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,1)), byrow = FALSE, nrow = 5 )
glucose_q2 <- data.frame(glucose_q2)
names(glucose_q2) = c('CRF1', 'GAL4', 'SWI5', 'ASH1', 'GAL80')
fit <- network(glucose_q2)
fit
fit.prior <- jointprior(fit)
fit.prior <- jointprior(fit,12)
fit.prior <- jointprior(fit,100)
fit.prior <- jointprior(fit,100)
hisc  <- autosearch(fit,glucose_q2,fit.prior,trace=FALSE,removecycles=FALSE)
fit       <- getnetwork(insert(fit,1,3,rats,fit.prior))
fit   <- getnetwork(insert(fit,1,3,glucose_q2,fit.prior))
hisc  <- autosearch(fit,glucose_q2,fit.prior,trace=FALSE,removecycles=FALSE)
hisc  <- autosearch(fit,glucose_q2,fit.prior,trace=FALSE)
library(deal)
fit <- network(glucose_q2)
fit.prior <- jointprior(fit,12)
fit   <- getnetwork(insert(fit,1,3,glucose_q2,fit.prior))
fit   <- getnetwork(insert(fit,1,3,rats,fit.prior))
hisc  <- autosearch(fit,glucose_q2,fit.prior,trace=FALSE)
fit.prior
fit.prior <- jointprior(fit,100)
fit.prior <- jointprior(fit,100)
fit <- network(glucose_q2)
fit.prior <- jointprior(fit,100)
fit.prior
g1 = c(42,12,12)
g2 = c(20,47,46,30,49,40,37,48,44,41,45,50,21,10,11,15,5,1,3,6,14)
g3 = c(29,28,19,8,22,26,25,36,39,27,24,23,33,32,31,34,36,9,16,8,4,2)
sort(g1)
sort(g2)
sort(g3)
g4 = cbind(g1,g2,g3)
g4 = rbind(g1,g2,g3)
g4
g4 = cbind(g1,g2,g3)
g4
g4 = c(g1,g2,g3)
sort(g4)
data = read.table('~/Desktop/Cho98.txt')
data = read.table('~/Desktop/cho/Cho98.txt')
View(data)
View(data)
values = data[c(-1,-2,-3),-1]
View(values)
values = data[c(-1,-2,-3),-1]
View(values)
values = data[-1,-1]
values = values[-1, ]
View(values)
View(values)
names(data)
data = read.table('~/Desktop/cho/Cho98.txt', header = TRUE)
names(data)
data[1:5,]
values = data[,c(-1,-2,-3)]
View(values)
View(values)
help("write.table")
write.table(values, file = "Cho.txt", sep = " ", eol = '\n', row.names = FALSE
, col.names = FALSE)
rm(list=ls())
data = read.table('~/Desktop/cho/Cho98.txt', header = TRUE)
values = data[,c(-1,-2,-3)]
n = dim(values)[1]
n
n = dim(values)[2]
n
rm(list=ls())
data = read.table('~/Desktop/cho/Cho98.txt', header = TRUE)
values = data[,c(-1,-2,-3)]
n = dim(values)[1] # number of genes in the file
value = matrix( rep(NA, dim(values)[1]*dim(values)[2] ), ncol = dim(values)[2])
source('~/Desktop/cho/Oct17Preprocess.r')
i=1
mean(values[i,])
values
values[1,]
mean(values[1,])
typeof(values)
sum(values[i,])
source('~/Desktop/cho/Oct17Preprocess.r')
source('~/Desktop/cho/Oct17Preprocess.r')
View(values)
View(values)
write.table(value, file = "'~/Desktop/cho/Cho.txt", sep = " ", eol = '\n'
, row.names = FALSE, col.names = FALSE, na = 1, append = FALSE)
write.table(value, file = "~/Desktop/cho/Cho.txt", sep = " ", eol = '\n'
, row.names = FALSE, col.names = FALSE, na = 1, append = FALSE)
write.table(value, file = "~/Desktop/cho/Cho.txt", sep = " ", eol = '\n'
, row.names = FALSE, col.names = FALSE, append = FALSE)
#setwd('~/Dropbox/FallRotation_Yuezhe/Pandapas/wildtype/TDBN/')
setwd('C:/Users/yuezli/Dropbox/FallRotation_Yuezhe/Pandapas/wildtype/TDBN/')
rm(list = ls())
## processing scores into networks
processingScore <- function(filename, threshold = 0.7147525)
{
re = read.table(file = paste(filename, 'txt', sep = "."), header = FALSE, sep = "")
names(re) <- c('upperstream', 'downstream', 'score', 'time_delay')
nnodes = 13
links <- matrix( rep(0, nnodes*nnodes), ncol = nnodes )
lnk = links
n = dim(re)[1] # number of entries
# column as upperstream, row as downstream
for( i in 1:n )
{
co = re[i,1]
ro = re[i,2]
lnk[co,ro] = lnk[co,ro] + re[n,3]
}
for(i in 1:nnodes)
{
for(j in 1:nnodes)
{
if( lnk[i,j] == 0 )
{
lnk[i,j] = 1000
}
}
}
print(lnk)
# when links[i,j] == 1, it suggests gene i is a regulator of gene j
# when links[i,j] == 1, it suggests gene i is not a regulator of gene j
for(i in 1:nnodes)
{
for(j in 1:nnodes)
{
if( lnk[i,j] < threshold )
{
links[i,j] = 1
}
else
{
links[i,j] = 0
}
}
}
for(i in 1:nnodes)
{
links[i,i] = 0 # it would never be considered as self-regulating
}
# loading data from the gold standard of yeast 1
gs = read.table('gs_wildtype.txt', header = FALSE, sep = "")
## find the correctly identified:
corr = gs + links
corr = ifelse(corr > 1.5, 1,0)
# corretly identified propertion
se = sum(corr)/sum(gs)
# misidentified
fp = links - gs
fp = ifelse(fp>0.1, 1, 0)
sp = 1- sum(fp)/(nnodes*nnodes - sum(gs))
#fn = gs - links
#fn = ifelse(fn > 0.1, 1,0)
#sum(fn)/sum(gs)
#sum(fn)/sum(links)
return(list(sensitivity = se, specificity = sp))
}
allrocs <- function( filename, thresholds )
{
pts = length(thresholds)
pse = rep(NA, pts)
psp = rep(NA, pts)
pfp = rep(NA, pts)
for(i in 1:pts)
{
p1 = processingScore(filename, threshold = thresholds[i])
pse[i] = p1$sensitivity
psp[i] = p1$specificity
}
return(list( se = pse, sp = psp ))
}
thresholds = c(0.71476,0.72, 0.81, 0.86, 0.9, 1, 5,6, 13, 32, 34, 40, 200)
roc_names = c('bikmeans2', 'i2', 'kmeans2', 'max25', 'max50', 'max75','mean', 'q2','TDT','top25','top75')
sp = matrix(rep(NA, 11*length(thresholds)), ncol = length(thresholds))
se = sp
for(i in 1:11)
{
sp[i,] = allrocs(roc_names[i], thresholds)$sp
se[i,] = allrocs(roc_names[i], thresholds)$se
}
# write.table(se, file = '~/Desktop/se.csv', row.names = FALSE, col.names = FALSE, append = FALSE, quote = FALSE, sep = ",")
# write.table(sp, file = '~/Desktop/sp.csv', row.names = FALSE, col.names = FALSE, append = FALSE, quote = FALSE, sep = ",")
setwd('~/Dropbox/FallRotation_Yuezhe/Pandapas/wildtype/TDBN/')
#setwd('C:/Users/yuezli/Dropbox/FallRotation_Yuezhe/Pandapas/wildtype/TDBN/')
rm(list = ls())
## processing scores into networks
processingScore <- function(filename, threshold = 0.7147525)
{
re = read.table(file = paste(filename, 'txt', sep = "."), header = FALSE, sep = "")
names(re) <- c('upperstream', 'downstream', 'score', 'time_delay')
nnodes = 13
links <- matrix( rep(0, nnodes*nnodes), ncol = nnodes )
lnk = links
n = dim(re)[1] # number of entries
# column as upperstream, row as downstream
for( i in 1:n )
{
co = re[i,1]
ro = re[i,2]
lnk[co,ro] = lnk[co,ro] + re[n,3]
}
for(i in 1:nnodes)
{
for(j in 1:nnodes)
{
if( lnk[i,j] == 0 )
{
lnk[i,j] = 1000
}
}
}
print(lnk)
# when links[i,j] == 1, it suggests gene i is a regulator of gene j
# when links[i,j] == 1, it suggests gene i is not a regulator of gene j
for(i in 1:nnodes)
{
for(j in 1:nnodes)
{
if( lnk[i,j] < threshold )
{
links[i,j] = 1
}
else
{
links[i,j] = 0
}
}
}
for(i in 1:nnodes)
{
links[i,i] = 0 # it would never be considered as self-regulating
}
# loading data from the gold standard of yeast 1
gs = read.table('gs_wildtype.txt', header = FALSE, sep = "")
## find the correctly identified:
corr = gs + links
corr = ifelse(corr > 1.5, 1,0)
# corretly identified propertion
se = sum(corr)/sum(gs)
# misidentified
fp = links - gs
fp = ifelse(fp>0.1, 1, 0)
sp = 1- sum(fp)/(nnodes*nnodes - sum(gs))
#fn = gs - links
#fn = ifelse(fn > 0.1, 1,0)
#sum(fn)/sum(gs)
#sum(fn)/sum(links)
return(list(sensitivity = se, specificity = sp))
}
allrocs <- function( filename, thresholds )
{
pts = length(thresholds)
pse = rep(NA, pts)
psp = rep(NA, pts)
pfp = rep(NA, pts)
for(i in 1:pts)
{
p1 = processingScore(filename, threshold = thresholds[i])
pse[i] = p1$sensitivity
psp[i] = p1$specificity
}
return(list( se = pse, sp = psp ))
}
thresholds = c(0.71476,0.72, 0.81, 0.86, 0.9, 1, 5,6, 13, 32, 34, 40, 200)
roc_names = c('bikmeans2', 'i2', 'kmeans2', 'max25', 'max50', 'max75','mean', 'q2','TDT','top25','top75')
sp = matrix(rep(NA, 11*length(thresholds)), ncol = length(thresholds))
se = sp
for(i in 1:11)
{
sp[i,] = allrocs(roc_names[i], thresholds)$sp
se[i,] = allrocs(roc_names[i], thresholds)$se
}
setwd('~/Dropbox/FallRotation_Yuezhe/Pandapas/wildtype/TDBN/')
#setwd('C:/Users/yuezli/Dropbox/FallRotation_Yuezhe/Pandapas/wildtype/TDBN/')
rm(list = ls())
## processing scores into networks
processingScore <- function(filename, threshold = 0.7147525)
{
re = read.table(file = paste(filename, 'txt', sep = "."), header = FALSE, sep = "")
names(re) <- c('upperstream', 'downstream', 'score', 'time_delay')
nnodes = 13
links <- matrix( rep(0, nnodes*nnodes), ncol = nnodes )
lnk = links
n = dim(re)[1] # number of entries
# column as upperstream, row as downstream
for( i in 1:n )
{
co = re[i,1]
ro = re[i,2]
lnk[co,ro] = lnk[co,ro] + re[n,3]
}
for(i in 1:nnodes)
{
for(j in 1:nnodes)
{
if( lnk[i,j] == 0 )
{
lnk[i,j] = 1000
}
}
}
#-- print lnk values to choose better cut-off threshold --#
# print(lnk)
#-- try not to use this feature when you are running a massive trunk of computation --#
#-- OR YOUR SCREEN WILL BE FULL OF NUMBERS YOU DO NOT REALLY CARE --#
# when links[i,j] == 1, it suggests gene i is a regulator of gene j
# when links[i,j] == 1, it suggests gene i is not a regulator of gene j
for(i in 1:nnodes)
{
for(j in 1:nnodes)
{
if( lnk[i,j] < threshold )
{
links[i,j] = 1
}
else
{
links[i,j] = 0
}
}
}
for(i in 1:nnodes)
{
links[i,i] = 0 # it would never be considered as self-regulating
}
# loading data from the gold standard of yeast 1
gs = read.table('gs_wildtype.txt', header = FALSE, sep = "")
## find the correctly identified:
corr = gs + links
corr = ifelse(corr > 1.5, 1,0)
# corretly identified propertion
se = sum(corr)/sum(gs)
# misidentified
fp = links - gs
fp = ifelse(fp>0.1, 1, 0)
sp = 1- sum(fp)/(nnodes*nnodes - sum(gs))
#fn = gs - links
#fn = ifelse(fn > 0.1, 1,0)
#sum(fn)/sum(gs)
#sum(fn)/sum(links)
return(list(sensitivity = se, specificity = sp))
}
allrocs <- function( filename, thresholds )
{
pts = length(thresholds)
pse = rep(NA, pts)
psp = rep(NA, pts)
pfp = rep(NA, pts)
for(i in 1:pts)
{
p1 = processingScore(filename, threshold = thresholds[i])
pse[i] = p1$sensitivity
psp[i] = p1$specificity
}
return(list( se = pse, sp = psp ))
}
thresholds = c(0.71476,0.72, 0.81, 0.86, 0.9, 1, 5,6, 13, 32, 34, 40, 200)
roc_names = c('bikmeans2', 'i2', 'kmeans2', 'max25', 'max50', 'max75','mean2', 'q2','TDT','top25','top75')
sp = matrix(rep(NA, 11*length(thresholds)), ncol = length(thresholds))
se = sp
for(i in 1:11)
{
sp[i,] = allrocs(roc_names[i], thresholds)$sp
se[i,] = allrocs(roc_names[i], thresholds)$se
}
# write.table(se, file = '~/Desktop/se.csv', row.names = FALSE, col.names = FALSE, append = FALSE, quote = FALSE, sep = ",")
# write.table(sp, file = '~/Desktop/sp.csv', row.names = FALSE, col.names = FALSE, append = FALSE, quote = FALSE, sep = ",")
##---- AREA UNDER THE CURVE FOR DIFFERENT DISCRETIZATION METHODS ----##
ls()
setwd('~/Dropbox/FallRotation_Yuezhe/Pandapas/wildtype/TDBN/')
#setwd('C:/Users/yuezli/Dropbox/FallRotation_Yuezhe/Pandapas/wildtype/TDBN/')
rm(list = ls())
## processing scores into networks
processingScore <- function(filename, threshold = 0.7147525)
{
re = read.table(file = paste(filename, 'txt', sep = "."), header = FALSE, sep = "")
names(re) <- c('upperstream', 'downstream', 'score', 'time_delay')
nnodes = 13
links <- matrix( rep(0, nnodes*nnodes), ncol = nnodes )
lnk = links
n = dim(re)[1] # number of entries
# column as upperstream, row as downstream
for( i in 1:n )
{
co = re[i,1]
ro = re[i,2]
lnk[co,ro] = lnk[co,ro] + re[n,3]
}
for(i in 1:nnodes)
{
for(j in 1:nnodes)
{
if( lnk[i,j] == 0 )
{
lnk[i,j] = 1000
}
}
}
#-- print lnk values to choose better cut-off threshold --#
# print(lnk)
#-- try not to use this feature when you are running a massive trunk of computation --#
#-- OR YOUR SCREEN WILL BE FULL OF NUMBERS YOU DO NOT REALLY CARE --#
# when links[i,j] == 1, it suggests gene i is a regulator of gene j
# when links[i,j] == 1, it suggests gene i is not a regulator of gene j
for(i in 1:nnodes)
{
for(j in 1:nnodes)
{
if( lnk[i,j] < threshold )
{
links[i,j] = 1
}
else
{
links[i,j] = 0
}
}
}
for(i in 1:nnodes)
{
links[i,i] = 0 # it would never be considered as self-regulating
}
# loading data from the gold standard of yeast 1
gs = read.table('gs_wildtype.txt', header = FALSE, sep = "")
## find the correctly identified:
corr = gs + links
corr = ifelse(corr > 1.5, 1,0)
# corretly identified propertion
se = sum(corr)/sum(gs)
# misidentified
fp = links - gs
fp = ifelse(fp>0.1, 1, 0)
sp = 1- sum(fp)/(nnodes*nnodes - sum(gs))
#fn = gs - links
#fn = ifelse(fn > 0.1, 1,0)
#sum(fn)/sum(gs)
#sum(fn)/sum(links)
return(list(sensitivity = se, specificity = sp))
}
allrocs <- function( filename, thresholds )
{
pts = length(thresholds)
pse = rep(NA, pts)
psp = rep(NA, pts)
pfp = rep(NA, pts)
for(i in 1:pts)
{
p1 = processingScore(filename, threshold = thresholds[i])
pse[i] = p1$sensitivity
psp[i] = p1$specificity
}
return(list( se = pse, sp = psp ))
}
thresholds = c(0.71476,0.72, 0.81, 0.86, 0.9, 1, 5,6, 13, 32, 34, 40, 200)
roc_names = c('bikmeans2', 'i2', 'kmeans2', 'max25', 'max50', 'max75','mean2', 'q2','TDT','top25','top75')
sp = matrix(rep(NA, 11*length(thresholds)), ncol = length(thresholds))
se = sp
for(i in 1:11)
{
sp[i,] = allrocs(roc_names[i], thresholds)$sp
se[i,] = allrocs(roc_names[i], thresholds)$se
}
# write.table(se, file = '~/Desktop/se.csv', row.names = FALSE, col.names = FALSE, append = FALSE, quote = FALSE, sep = ",")
# write.table(sp, file = '~/Desktop/sp.csv', row.names = FALSE, col.names = FALSE, append = FALSE, quote = FALSE, sep = ",")
##---- AREA UNDER THE CURVE FOR DIFFERENT DISCRETIZATION METHODS ----##
auroc <- function(sp, se)
{
# both se and sp should be a row vector
k = length(sp)
spp = rep(1,k) - sp
sppp = spp
tp = se[sort.list(sppp, decreasing = FALSE)]
fp = spp[sort.list(sppp, decreasing = FALSE)]
tp = c(0,tp,1)
fp = c(0,fp,1)
k = k+1
area = 0
for( j in 1:k )
{
auro = (fp[j+1] - fp[j]) * ( tp[k+1]+tp[k] )/2
area = area + auro
rm(auro)
}
# plot(fp, tp)
return(area)
}
aUrocBanJowT = rep(NA, 11)
for( i in 1:11 )
{
aUrocBanJowT[i] = auroc(sp[i,], se[i,])
}
print(aUrocBanJowT)
